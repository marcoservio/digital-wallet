// <auto-generated />
using System;
using DigitalWallet.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalWallet.Infrastructure.Migrations
{
    [DbContext(typeof(DigitalWalletDbContext))]
    [Migration("20250510223826_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigitalWallet.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FromWalletId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("ToWalletId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FromWalletId");

                    b.HasIndex("ToWalletId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 100m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 459, DateTimeKind.Utc).AddTicks(1032),
                            Description = "Admin to Bob",
                            FromWalletId = 1L,
                            IsActive = true,
                            Status = 0,
                            ToWalletId = 2L,
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 458, DateTimeKind.Utc).AddTicks(9582)
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 50m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 459, DateTimeKind.Utc).AddTicks(1256),
                            Description = "Bob to Charlie",
                            FromWalletId = 2L,
                            IsActive = true,
                            Status = 0,
                            ToWalletId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 459, DateTimeKind.Utc).AddTicks(1253)
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 30m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 459, DateTimeKind.Utc).AddTicks(1259),
                            Description = "Charlie to Admin",
                            FromWalletId = 3L,
                            IsActive = true,
                            Status = 0,
                            ToWalletId = 1L,
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 459, DateTimeKind.Utc).AddTicks(1257)
                        });
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdentifier")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 468, DateTimeKind.Utc).AddTicks(2535),
                            Email = "admin@gmail.com",
                            IsActive = true,
                            Name = "Admin",
                            Password = "$2a$11$pOpUBsD/FJOGeqxrki2wLuNYr5TGLGJyBxgQdbMzu9X7KkQSSoOAG",
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 468, DateTimeKind.Utc).AddTicks(2538),
                            UserIdentifier = new Guid("b2db69f1-ab7b-4244-8696-8a6df20f5f42")
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 722, DateTimeKind.Utc).AddTicks(9352),
                            Email = "bob@gmail.com",
                            IsActive = true,
                            Name = "Bob",
                            Password = "$2a$11$DUN.qJWoQu8SaMQe.wfCrecL59n7d1j0Cuyr0hz0m5WMezXt0lM.m",
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 722, DateTimeKind.Utc).AddTicks(9357),
                            UserIdentifier = new Guid("cc7231e3-a67c-4611-b913-f535fbc6563a")
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 878, DateTimeKind.Utc).AddTicks(8180),
                            Email = "charlie@gmail.com",
                            IsActive = true,
                            Name = "Charlie",
                            Password = "$2a$11$1lMJZfzyU8m.GdfvpFn/4ubR3fyTvB558kgH7YGikH2Di/Yd4J6I.",
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 25, 878, DateTimeKind.Utc).AddTicks(8186),
                            UserIdentifier = new Guid("9faec17d-1a7d-40e8-a326-5add0880f048")
                        });
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("WalletKey")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WalletKey")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Balance = 1000m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2053),
                            IsActive = true,
                            RowVersion = new byte[0],
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2055),
                            UserId = 1L,
                            WalletKey = new Guid("330889c2-de95-49ce-bc74-c336ef21846b")
                        },
                        new
                        {
                            Id = 2L,
                            Balance = 500m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2606),
                            IsActive = true,
                            RowVersion = new byte[0],
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2607),
                            UserId = 2L,
                            WalletKey = new Guid("e4b9803b-2252-437b-a557-a64de1158097")
                        },
                        new
                        {
                            Id = 3L,
                            Balance = 300m,
                            CreatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2609),
                            IsActive = true,
                            RowVersion = new byte[0],
                            UpdatedAt = new DateTime(2025, 5, 10, 22, 38, 26, 70, DateTimeKind.Utc).AddTicks(2610),
                            UserId = 3L,
                            WalletKey = new Guid("e02e6454-2429-4cdd-b4ab-47f4d1ff8806")
                        });
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("DigitalWallet.Domain.Entities.Wallet", "FromWallet")
                        .WithMany("SentTransactions")
                        .HasForeignKey("FromWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DigitalWallet.Domain.Entities.Wallet", "ToWallet")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ToWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromWallet");

                    b.Navigation("ToWallet");
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("DigitalWallet.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("DigitalWallet.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.User", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DigitalWallet.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SentTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
